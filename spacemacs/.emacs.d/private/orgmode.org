#+PROPERTY: header-args :tangle yes

* Keybindings
** Global capture
   org capture
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

org clock stuff
#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "oi" 'org-clock-in)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "oo" 'org-clock-out)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "oj" 'org-clock-jump-to-current-clock)
  (spacemacs/set-leader-keys "oj" 'org-clock-jump-to-current-clock)
#+END_SRC

** add note
   this is too handy to not have a conventient binding. it will add a
   timestamped note to the log book of the curent heading
#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "on" 'org-add-note)
#+END_SRC
* General settings
** refile targets
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))
#+END_SRC
** default notes file
#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file "~/dev/notes/refile.org")
#+END_SRC
** refile settings
Use full outline paths for refile targets - we file directly with IDO
#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path t)
#+END_SRC

Allow refile to create parent tasks with confirmation
#+BEGIN_SRC emacs-lisp
(setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC

Refile in single step
#+BEGIN_SRC emacs-lisp
(setq org-outline-path-complete-in-steps nil)
#+END_SRC

** No invisible edits
try to keep myself from deleting hidden headings/blocks etc.
#+BEGIN_SRC emacs-lisp
  (setq org-catch-invisible-edits 'error)
#+END_SRC

** Agenda
just add the entire directory
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/dev/notes"))
#+END_SRC

skip stuff i no longer care about
#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done  t)
#+END_SRC

show agenda as the only window
#+BEGIN_SRC emacs-lisp
(setq org-agenda-window-setup "only-window")
#+END_SRC

if agenda was opened from WM (frame name will be "org-agenda-quickview"
then close the frame when we are done
#+BEGIN_SRC emacs-lisp
(defadvice org-agenda-quit
    (after close-agenda-quickview)
  (if (equal "org-agenda-quickview" (frame-parameter nil 'name))
      (delete-frame)))

(ad-activate 'org-agenda-quit)
#+END_SRC

*** custom agenda commands
#+BEGIN_SRC emacs-lisp
  (defun cmp-date-property (prop)
    "Compare two `org-mode' agenda entries, `A' and `B', by some date property.

  If a is before b, return -1. If a is after b, return 1. If they
  are equal return t."
    (lexical-let ((prop prop))
      #'(lambda (a b)

          (let* ((a-pos (get-text-property 0 'org-marker a))
                 (b-pos (get-text-property 0 'org-marker b))
                 (a-date (or (org-entry-get a-pos prop)
                             (format "<%s>" (org-read-date t nil "now"))))
                 (b-date (or (org-entry-get b-pos prop)
                             (format "<%s>" (org-read-date t nil "now"))))
                 (cmp (compare-strings a-date nil nil b-date nil nil))
                 )
            (if (eq cmp t) nil (signum cmp))
            ))))

  (setq org-agenda-custom-commands
        '(("w" "Work agenda view"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (agenda "")
            (tags "@work"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'nottodo '("IN_REVIEW")))
                   (org-agenda-overriding-header "Review follow up"))))
           ((org-agenda-tag-filter-preset '("+@work"))))
          ("b" "Bookmarks view"
            ((org-tags-view "BOOKMARK")
            ;; (org-agenda-cmp-user-defined (cmp-date-property
            ;;                               "CREATED"))
            ;; (org-agenda-sorting-strategy '(user-defined-down))
            )))
        )
#+END_SRC

#+RESULTS:
| w | Work agenda view | ((tags PRIORITY="A" ((org-agenda-skip-function (quote (org-agenda-skip-entry-if (quote todo) (quote done)))) (org-agenda-overriding-header High-priority unfinished tasks:))) (agenda ) (tags @work ((org-agenda-skip-function (quote (org-agenda-skip-entry-if (quote nottodo) (quote (IN_REVIEW))))) (org-agenda-overriding-header Review follow up)))) | ((org-agenda-tag-filter-preset (quote (+@work)))) |
| b | Bookmarks view   | ((org-tags-view BOOKMARK) (org-agenda-sorting-strategy (quote (user-defined-down))))                                                                                                                                                                                                                                                                      |                                                   |

** org link open
#+BEGIN_SRC emacs-lisp
  (setq org-link-frame-setup
        (quote ((vm . vm-visit-folder-other-frame)
                (vm-imap . vm-visit-imap-folder-other-frame)
                (gnus . org-gnus-no-new-news)
                (file . find-file-other-frame)
                (wl . wl-other-frame))))
#+END_SRC
** startup indented
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC
** Autosave org files
#+BEGIN_SRC emacs-lisp
(add-hook 'auto-save-hook 'org-save-all-org-buffers)
#+END_SRC
* Extra includes/packages etc.
** Org Drill
org drill, think this comes from org-
#+BEGIN_SRC emacs-lisp :tangle no
(require 'org-drill)
#+END_SRC
** Markdown export
#+BEGIN_SRC emacs-lisp
(require 'ox-md)
#+END_SRC
** Org-protocol
#+BEGIN_SRC emacs-lisp
(require 'org-protocol)
#+END_SRC
* Capture templates
#+BEGIN_SRC emacs-lisp
  ;; this formatting is kind of weird but it makes it easier
  (setq org-capture-templates
        (quote (
  ("w" "work todo" entry (file+headline "~/dev/notes/uniregistry.org" "Tasks")
  "* TODO %?
  :PROPERTIES:
  :CREATED: %U
  :END:
  " :clock-in t :clock-resume t :empty-lines 1)

  ("t" "todo" entry (file+headline "~/dev/notes/refile.org" "Tasks")
  "* TODO %?
  :PROPERTIES:
  :CREATED: %U
  :END:
  " :clock-in t :clock-resume t :empty-lines 1)

  ;; these are for anything that interupts my current task
  ("i" "interruption" entry (file+headline "~/dev/notes/uniregistry.org" "Interuptions")
  "* TODO %?
  :PROPERTIES:
  :CREATED: %U
  :END:
  " :clock-in t :clock-resume t :empty-lines 1)

  ;; ("r" "respond" entry (file+headline "~/dev/notes/uniregistry.org" "Tasks")
  ;; "* NEXT Respond to %:from on %:subject
  ;; SCHEDULED: %t
  ;; CREATED: %U
  ;; %a
  ;; " :clock-in t :clock-resume t :immediate-finish t)

  ("n" "note" entry (file "~/dev/notes/refile.org")
  "* %? :NOTE:
  :PROPERTIES:
  :CREATED: %U
  :END:
  %a
  " :clock-in t :clock-resume t :empty-lines 1)

  ("s" "code snippet" entry (file+headline "~/dev/notes/stuff.org" "Refile")
  "* %?
  :PROPERTIES:
  :CREATED: %U
  :END:")

  ("d" "Journal" entry (file+olp+datetree "~/dev/notes/diary.org")
  "* %?
  :PROPERTIES:
  :CREATED: %U
  :END:
  " :clock-in t :clock-resume t :empty-lines 1)

  ("j" "Work Journal" entry (file+olp+datetree "~/dev/notes/work_journal.org")
  "* %?
  :PROPERTIES:
  :CREATED: %U
  :END:
  " :clock-in t :clock-resume t :empty-lines 1)
  ;; ("w" "org-protocol" entry (file "~/dev/notes/refile.org")
  ;;  "* TODO Review %c\nCREATED: %U\n" :immediate-finish t)

  ("m" "Meeting" entry (file "~/dev/notes/refile.org")
  "* TODO %? :MEETING:
  :PROPERTIES:
  :CREATED: %U
  :END:
  " :clock-in t :clock-resume t :empty-lines 1)

  ;; ("d" "NowU Deploy" entry (file+olp "~/dev/notes/gannet.org" "Tasks" "Deploy")
  ;;  "* CREATED: %U\nrelease %?\n%[~/dev/notes/gannet_deployment_task.org]" :clock-in t :clock-resume t)

  ("h" "Habit" entry (file "~/dev/notes/refile.org")
  "* NEXT %?
  :CREATED: %U
  %a
  SCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")
  :PROPERTIES:
  :STYLE: habit
  :REPEAT_TO_STATE: NEXT
  :END:
  ")

  ("b" "Link from browser" entry (file+headline "~/dev/notes/bookmarks.org" "Refile")
  "* TODO %? %:description %^g
  :PROPERTIES:
  :CREATED: %U
  :SOURCE: %:link
  :END:
  %:link

  %i

  " :clock-in t :clock-resume t)

  )))
#+END_SRC

#+RESULTS:
| w | work todo | entry | (file+headline ~/dev/notes/uniregistry.org Tasks) | * TODO %? |

* Capture settings
  test 1
  from here https://fuco1.github.io/2017-09-02-Maximize-the-org-capture-buffer.html
  #+BEGIN_SRC emacs-lisp :tangle no
    (defvar my-org-capture-before-config nil
      "Window configuration before `org-capture'.")

    (defadvice org-capture (before save-config activate)
      "Save the window configuration before `org-capture'."
      (setq my-org-capture-before-config (current-window-configuration)))

    (add-hook 'org-capture-mode-hook 'delete-other-windows)

    (defun my-org-capture-cleanup ()
      "Clean up the frame created while capturing via org-protocol."
      ;; In case we run capture from emacs itself and not an external app,
      ;; we want to restore the old window config
      (when my-org-capture-before-config
        (set-window-configuration my-org-capture-before-config))
      (-when-let ((&alist 'name name) (frame-parameters))
        (when (equal name "org-protocol-capture")
          (delete-frame))))

    (add-hook 'org-capture-after-finalize-hook 'my-org-capture-cleanup)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle no
    (defadvice org-switch-to-buffer-other-window
        (after supress-window-splitting activate)
      "Delete the extra window if we're in a capture frame"
      (if (equal "org-protocol-capture" (frame-parameter nil 'name))
          (delete-other-windows)))
  #+END_SRC

  my simpler version that seems to actually work
  #+BEGIN_SRC emacs-lisp
    (defadvice org-switch-to-buffer-other-window
        (after supress-window-splitting activate)
      "Delete the extra window if we're in a capture frame"
      (if (equal "org-protocol-capture" (frame-parameter nil 'name))
          (delete-other-windows)))

    (defun tosh/post-capture ()
      (if (equal "org-protocol-capture" (frame-parameter nil 'name))
          (delete-frame)))

    (add-hook 'org-capture-after-finalize-hook 'tosh/post-capture)
  #+END_SRC
* Todos
** states
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "IN_REVIEW(r!)" "MEETING" "WAITING" "|" "DONE(d!)" "HOLD" "CANCELLED(c@)")))
#+END_SRC
** colors  
#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "blue" :weight bold)
                ("IN_REVIEW" :foreground "white" :background "red" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold))))
#+END_SRC
 
* Clocking
** Change tasks to NEXT when clocking in
Function
#+BEGIN_SRC emacs-lisp
(defun bh/clock-in-to-next (kw)
  "Switch a task from TODO to NEXT when clocking in.
Skips capture tasks, projects, and subprojects.
Switch projects and subprojects from NEXT back to TODO"
  (when (not (and (boundp 'org-capture-mode) org-capture-mode))
    "NEXT"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
#+END_SRC
** Drawers
Separate drawers for clocking and logs
#+BEGIN_SRC emacs-lisp
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
#+END_SRC

Save clock data and state changes and notes in the LOGBOOK drawer
#+BEGIN_SRC emacs-lisp
(setq org-clock-into-drawer t)
#+END_SRC
** log into drawer
#+BEGIN_SRC emacs-lisp
(setq org-log-into-drawer "LOGBOOK")
#+END_SRC
** Create unique IDs for tasks when linking
The following setting creates a unique task ID for the heading in the
=PROPERTY= drawer when I use =C-c l=.  This allows me to move the task
around arbitrarily in my org files and the link to it still works.

#+begin_src emacs-lisp
  (require 'org-id)
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
#+end_src
** Always use hours
   days are dumb
   #+BEGIN_SRC emacs-lisp
   (setq org-duration-format 'h:mm)
   #+END_SRC
* Babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     ;; (ditaa . t)
     (python . t)
     (http . t)
     (ipython . t)
     (dot . t)
     (sql . t)))
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively nil)
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-window-setup 'other-frame)
#+END_SRC
* Export settings
#+BEGIN_SRC emacs-lisp
(setq org-html-htmlize-output-type 'css)
#+END_SRC
* Bookmark stuff
#+BEGIN_SRC emacs-lisp :tangle no
  (defun tl/bookmark-search (search)
    (let ((search-tags (split-string search)) (res '(and (todo))))
      (--map (list (org-element-property :raw-value it)
                   (org-element-property :SOURCE it))
             (org-ql "~/dev/notes/bookmarks.org"
               ;; (and (todo)
               ;;      (tags search))))))
                 ;; (and (let (s) (--each search-tags (setq s (cons `(tags ,it) s))) s))))))

                 (eval (dolist (search-str search-tags res)
                         (print search-tags)
                         (setq res (append res `((tags ,search-str))))))))))

    ;; (print (tl/bookmark-search "test"))

    ;; (defun tl/build-and (search-tags)
    ;;   (let (res '(and (todo)))
    ;;     (dolist (search-str search-tags res)
    ;;       (setq res (append res `((tags ,search-str)))))))

    ;; (let (res)
    ;;   (dolist (str (split-string "tosh") res)
    ;;     (setq res str)
    ;;     (print res)))


    ;; (--> '("tosh" "stuff") `(tags ,it))

    ;; (let (s) (--each '("tosh" "test") (setq s (cons `(tags ,it) s))) s)
#+END_SRC

#+RESULTS:
: tl/bookmark-search

#+BEGIN_SRC emacs-lisp :tangle no
  (defun tl/bookmark-search (search)
        (--map (list (org-element-property :raw-value it)
                     (org-element-property :SOURCE it))
               (org-ql "~/dev/notes/bookmarks.org"
                 (and
                  (todo)
                  (tags search)))))

#+END_SRC

and this one actually works, but only for one tag and not anded together
#+BEGIN_SRC emacs-lisp :tangle no
(defun tl/bookmark-search (search)
  (--map (list (org-element-property :raw-value it)
               (org-element-property :SOURCE it))
         (org-ql--query "~/dev/notes/bookmarks.org"
           `(and (todo)
                 (tags ,search))
           :action (lambda ()
                     (org-element-headline-parser (line-end-position))))))
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle no
(tl/bookmark-search "test")
#+END_SRC

#+RESULTS:
| tosh nottest | - (Bing) | https://www.bing.com/?toHttps |

#+BEGIN_SRC emacs-lisp :tangle no
(tl/build-and '("test"))
#+END_SRC
